#!/usr/bin/env python3
import argparse

import pandas as pd

import coincidencetest
from coincidencetest import find_concepts
from coincidencetest import coincidencetest

def gather_data(data, closed_sets, dual_sets):
    sums = data.apply(lambda row : sum(row), axis=0)
    gathered = {
        'number of samples' : data.shape[0],
        'number of features' : data.shape[1],
        'frequencies' : dict(sums),
        'groups' : [{
                'signature' : closed_sets[i],
                'number of samples' : len(dual_sets[i]),
            } for i in range(len(closed_sets)) if len(closed_sets[i]) > 1
        ],
    }
    return gathered

def do_tests(gathered):
    frequencies = gathered['frequencies']
    rows = []
    for item in gathered['groups']:
        p_value = coincidencetest(
            item['number of samples'],
            [frequencies[feature] for feature in item['signature']],
            gathered['number of samples'],
            correction_feature_set_size=gathered['number of features'],
        )
        rows.append({
            'Signature' : ' '.join(sorted(item['signature'])),
            'Frequency' : item['number of samples'],
            'Out of' : gathered['number of samples'],
            'p-value' : p_value,
        })
        print('Tested signature %s' % ' '.join(sorted(item['signature'])))

    table = pd.DataFrame(rows)
    table.sort_values(by='p-value', inplace=True)
    return table

if __name__=='__main__':
    parser = argparse.ArgumentParser(
        description = ''.join([
            'This program computes "formal concepts" (maximal biclusters) in ',
            'binary feature data, assesses them using the exact test for ',
            'coincidence, and reports the results.',
        ])
    )
    parser.add_argument(
        '--input-filename',
        dest='input_filename',
        type=str,
        required=True,
        help='CSV or TSV file containing a binary matrix with row and column names included.',
    )
    parser.add_argument(
        '--delimiter',
        type=str,
        default='tab',
        help='Either a comma (the character ,) or the word tab. Default is tab.',
    )
    parser.add_argument(
        '--level-limit',
        dest='level_limit',
        type=int,
        default=None,
        help='Per-level limit on considered pairs for bicluster discovery algorithm. See documentation for ConceptLattice.',
    )
    parser.add_argument(
        '--max-recursion',
        dest='max_recursion',
        type=int,
        default=None,
        help='Limit on number of recursion levels for bicluster discovery algorithm. See documentation for ConceptLattice.',
    )
    parser.add_argument(
        '--output-tsv',
        dest='output_tsv',
        type=str,
        required=True,
        help='If provided, used as output filename for table of discovered signatures.'
    )
    args = parser.parse_args()

    delimiter = args.delimiter
    if delimiter == 'tab':
        delimiter = '\t'
    data = pd.read_csv(args.input_filename, delimiter=delimiter)
    closed_sets, dual_sets = find_concepts(data, level_limit=args.level_limit, max_recursion=args.max_recursion)
    gathered = gather_data(data, closed_sets, dual_sets)
    
    table = do_tests(gathered)
    table.to_csv(args.output_tsv, sep='\t', index=False)
